//
//  CollectionGeneration.swift
//  DevTesting
//
//  Created by Prachi Gauriar on 3/8/25.
//

import Foundation

extension Array {
    /// Creates a new array whose elements are generated by the specified closure.
    ///
    /// - Parameters:
    ///   - count: The number of elements in the new array.
    ///   - elementGenerator: A closure that generates array elements.
    public init<ErrorType>(
        count: Int,
        elementGenerator: () throws(ErrorType) -> Element
    ) throws(ErrorType) where ErrorType: Error {
        try self.init(count: count) { (_) throws(ErrorType) in
            try elementGenerator()
        }
    }


    /// Creates a new array whose elements are generated by the specified closure.
    ///
    /// - Parameters:
    ///   - count: The number of elements in the new array.
    ///   - elementGenerator: A closure that generates array elements. Its argument is the index of the element being
    ///     generated.
    public init<ErrorType>(
        count: Int,
        elementGenerator: (Int) throws(ErrorType) -> Element
    ) throws(ErrorType) where ErrorType: Error {
        self.init()
        reserveCapacity(count)

        for i in 0 ..< count {
            append(try elementGenerator(i))
        }
    }
}


extension Dictionary {
    /// Creates a new dictionary whose elements are generated by the specified closure.
    ///
    /// If the closure creates multiple key-value pairs with the same key, the last pair is used.
    ///
    /// - Warning: `keyPairGenerator` will be called repeatedly until the dictionary contains `count` elements. If it
    ///   cannot produce `count` unique keys, this function will never return.
    ///
    /// - Parameters:
    ///   - count: The number of elements in the new dictionary.
    ///   - keyPairGenerator: A closure that generates key-value pairs.
    public init<ErrorType>(
        count: Int,
        keyPairGenerator: () throws(ErrorType) -> (Key, Value)
    ) throws(ErrorType) where ErrorType: Error {
        self.init(minimumCapacity: count)

        while self.count < count {
            let (key, value) = try keyPairGenerator()
            self[key] = value
        }
    }
}


extension Set {
    /// Creates a new set whose elements are generated by the specified closure.
    ///
    /// - Warning: `elementGenerator` will be called repeatedly until the set contains `count` elements. If it cannot
    ///   produce `count` unique values, this function will never return.
    ///
    /// - Parameters:
    ///   - count: The number of elements in the new set.
    ///   - elementGenerator: A closure that generates set elements.
    public init<ErrorType>(
        count: Int,
        elementGenerator: () throws(ErrorType) -> Element
    ) throws(ErrorType) where ErrorType: Error {
        self.init(minimumCapacity: count)

        while self.count < count {
            insert(try elementGenerator())
        }
    }
}
